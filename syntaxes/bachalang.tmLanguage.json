{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "bachalang",
	"scopeName": "source.bc",
	"patterns": [
	  {
		"include": "#comments"
	  },
	  {
		"include": "#strings"
	  },
	  {
		"include": "#keywords"
	  },
	  {
		"include": "#operators"
	  },
	  {
		"include": "#numbers"
	  },
	  {
		"include": "#variables"
	  }
	],
	"repository": {
	  "variables": {
		"patterns": [
		  {
			"name": "meta.function.declaration.bachalang",
			"patterns": [
			  {
				"match": "\\b(function)\\s+([A-Z][a-zA-Z0-9]*)\\b",
				"captures": {
				  "1": {
					"name": "storage.type.function.bachalang"
				  },
				  "2": {
					"name": "entity.name.type.bachalang"
				  }
				}
			  },
			  {
				"match": "\\b(function)\\s+([_a-zA-Z][_a-zA-Z0-9]*)\\b",
				"captures": {
				  "1": {
					"name": "storage.type.function.bachalang"
				  },
				  "2": {
					"name": "entity.name.function.bachalang"
				  }
				}
			  },
			  {
				"begin": "\\b(function)\\s+@\"",
				"end": "\"",
				"name": "entity.name.function.string.bachalang",
				"beginCaptures": {
				  "1": {
					"name": "storage.type.function.bachalang"
				  }
				},
				"patterns": [
				  {
					"include": "#stringcontent"
				  }
				]
			  },
			  {
				"name": "storage.type.variable.bachalang",
				"match": "\\b(let)\\b"
			  }
			]
		  },
		  {
			"name": "meta.function.call.bachalang",
			"patterns": [
			  {
				"match": "([A-Z][a-zA-Z0-9]*)(?=\\s*\\()",
				"name": "entity.name.type.bachalang"
			  },
			  {
				"match": "([_a-zA-Z][_a-zA-Z0-9]*)(?=\\s*\\()",
				"name": "entity.name.function.bachalang"
			  }
			]
		  },
		  {
			"name": "meta.variable.bachalang",
			"patterns": [
			  {
				"match": "\\b[_a-zA-Z][_a-zA-Z0-9]*\\b",
				"name": "variable.bachalang"
			  }
			]
		  }
		]
	  },
	  "keywords": {
		"patterns": [
		  {
			"match": "\\b(while|for|to)\\b",
			"name": "keyword.control.repeat.bachalang"
		  },
		  {
			"name": "keyword.control.flow.bachalang",
			"match": "\\b(break|return|continue)\\b"
		  },
		  {
			"name": "keyword.control.conditional.bachalang",
			"match": "\\b(if|else|elseif)\\b"
		  },
		  {
			"name": "constant.numeric.bachalang",
			"match": "\\b(null|undefined)\\b"
		  },
		  {
			"name": "constant.numeric.bachalang",
			"match": "\\b(true|false)\\b"
		  }
		]
	  },
	  "operators": {
		"patterns": [
		  {
			"name": "keyword.operator.comparison.bachalang",
			"match": "(\\b(and|or)\\b)|(==|!=)"
		  },
		  {
			"name": "keyword.operator.arithmetic.bachalang",
			"match": "(-%?|\\+%?|\\*%?|/|%)=?"
		  },
		  {
			"name": "keyword.operator.bitwise.bachalang",
			"match": "(<=|>=|<%?|>|!|&|\\^|\\|)=?"
		  },
		  {
			"name": "keyword.operator.special.bachalang",
			"match": "(=|==|\\+\\+|\\*\\*|->)"
		  }
		]
	  },
	  "comments": {
		"patterns": [
		  {
			"name": "comment.line.number-sign",
			"begin": "#",
			"end": "\\n"
		  }
		]
	  },
	  "strings": {
		"patterns": [
		  {
			"name": "string.quoted.double.bachalang",
			"begin": "\"",
			"end": "\"",
			"patterns": [
			  {
				"include": "#stringcontent"
			  }
			]
		  }
		]
	  },
	  "stringcontent": {
		"patterns": [
		  {
			"name": "constant.character.escape.bachalang",
			"match": "\\\\([nrt'\"\\\\]|(x[0-9a-fA-F]{2})|(u\\{[0-9a-fA-F]+\\}))"
		  },
		  {
			"name": "invalid.illegal.unrecognized-string-escape.bachalang",
			"match": "\\\\."
		  }
		]
	  },
	  "numbers": {
		"patterns": [
		  {
			"name": "constant.numeric.hexfloat.bachalang",
			"match": "\\b0x[0-9a-fA-F][0-9a-fA-F_]*(\\.[0-9a-fA-F][0-9a-fA-F_]*)?([pP][+-]?[0-9a-fA-F_]+)?\\b"
		  },
		  {
			"name": "constant.numeric.float.bachalang",
			"match": "\\b[0-9][0-9_]*(\\.[0-9][0-9_]*)?([eE][+-]?[0-9_]+)?\\b"
		  },
		  {
			"name": "constant.numeric.decimal.bachalang",
			"match": "\\b[0-9][0-9_]*\\b"
		  },
		  {
			"name": "constant.numeric.hexadecimal.bachalang",
			"match": "\\b0x[a-fA-F0-9_]+\\b"
		  },
		  {
			"name": "constant.numeric.octal.bachalang",
			"match": "\\b0o[0-7_]+\\b"
		  },
		  {
			"name": "constant.numeric.binary.bachalang",
			"match": "\\b0b[01_]+\\b"
		  },
		  {
			"name": "constant.numeric.invalid.bachalang",
			"match": "\\b[0-9](([eEpP][+-])|[0-9a-zA-Z_])*(\\.(([eEpP][+-])|[0-9a-zA-Z_])*)?([eEpP][+-])?[0-9a-zA-Z_]*\\b"
		  }
		]
	  }
	}
  }